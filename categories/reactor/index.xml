<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactor on Matrix</title>
    <link>https://liufenix.github.io/categories/reactor/</link>
    <description>Recent content in Reactor on Matrix</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://liufenix.github.io/categories/reactor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reactor介绍</title>
      <link>https://liufenix.github.io/posts/reactor/introduction/introduction/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://liufenix.github.io/posts/reactor/introduction/introduction/</guid>
      <description>Reactor是什么？ Reactor 框架是 Pivotal 公司开发的，实现了 Reactive Programming 思想，符合 Reactive Streams 规范（Reactive Streams 是由 Netflix、TypeSafe、Pivotal 等公司发起的）的一项开源项目。
Reactor 是完全基于反应式流规范设计和实现的库，是 Spring 5 中反应式编程的基础。
Reactor 官方的描述：
Reactive Streams based projects for backpressure-ready asynchronous message passing.
Reactor 的主要模块 Reactor 框架主要有两个主要的模块：
reactor-core：负责 Reactive Programming 相关的核心 API 的实现 reactor-ipc：负责高性能网络通信的实现，目前是基于 Netty 实现的。 Reactor 的主要类 在 Reactor 中，经常使用的类并不是很多，主要有以下两个：
Mono 实现了 org.reactivestreams.Publisher 接口，代表0到1个元素的发布者。 Flux 同样实现了 org.reactivestreams.Publisher 接口，代表0到N个元素的发表者。 可能会使用到的类
Scheduler 表示背后驱动反应式流的调度器，通常由各种线程池实现。 </description>
    </item>
    
  </channel>
</rss>
